{
    "author": "Kejie Jack He",
    "General": {
        "template": "<?xml version='1.0' encoding='UTF-8' standalone='no'?>\n<Legup version='2.0.0'>\n    <puzzle name='$PUZZLENAME$'>\n        <board height='$HEIGHT$' width='$WIDTH$'>\n            <cells>\n                $CONTENT$\n            </cells>\n        </board>\n    </puzzle>\n</Legup>",
        "cell": "<cell value='$VALUE$' x='$X$' y='$Y$'/>",
        "function": "function General_output(e){   \r\n\r\n    var template = ''+ JSON_SRC['General']['template']\r\n    template = template.replace('$HEIGHT$',GRID_HEIGHT)\r\n    template = template.replace('$WIDTH$',GRID_WIDTH)\r\n    var content = ''\r\n    var cell = ''+ JSON_SRC['General']['cell']\r\n    var flag = false\r\n    for (let i = 0; i < GRID_HEIGHT; i++) {\r\n        for (let j = 0; j < GRID_WIDTH; j++) {\r\n            if(GRID_DATA[i+1][j+1] != ''){\r\n                var thisline = cell.replace('$VALUE$',GRID_DATA[i+1][j+1]).replace('$X$',j).replace('$Y$',i)\r\n                content += thisline\r\n                flag = true\r\n            }\r\n        }\r\n    }\r\n    template = template.replace('$CONTENT$',content)\r\n    if(flag){\r\n        console.log(template)\r\n        return template\r\n    }\r\n    else{\r\n        console.log(\"Nothing to output! Empty board.\")\r\n    }\r\n   \r\n}",
        "useStandard": false,
        "XMLName": "General"
    },
    "GeneralWithBorderLabel": {
        "template": "<?xml version='1.0' encoding='UTF-8' standalone='no'?>\n<Legup version='2.0.0'>\n    <puzzle name='$PUZZLENAME$'>\n        <board height='$HEIGHT$' width='$WIDTH$'>\n            <cells>\n                $CONTENT$\n            </cells>\n            <axis side='east'>\n                $AXISEAST$\n            </axis>\n            <axis side='south'>\n                $AXISSOUTH$\n            </axis>\n        </board>\n    </puzzle>\n</Legup>",
        "cell": "<cell value='$VALUE$' x='$X$' y='$Y$'/>",
        "clue": "<clue index='$INDEX$' value='$VALUE$'/>",
        "function":"function GeneralWithBorderLabel_output(e) {\r\n    let template = '' + JSON_SRC['GeneralWithBorderLabel']['template']\r\n    template = template.replace('$HEIGHT$', GRID_HEIGHT)\r\n    template = template.replace('$WIDTH$', GRID_WIDTH)\r\n    let content = ''\r\n    let cell = '' + JSON_SRC['GeneralWithBorderLabel']['cell']\r\n    let clue = '' + JSON_SRC['GeneralWithBorderLabel']['clue']\r\n\r\n    // Replacing the content of the grid\r\n    let flag = false\r\n    for (let i = 0; i < GRID_HEIGHT; i++) {\r\n        for (let j = 0; j < GRID_WIDTH; j++) {\r\n            if (GRID_DATA[i + 1][j + 1] != '') {\r\n                let thisline = cell.replace('$VALUE$', GRID_DATA[i + 1][j + 1]).replace('$X$', i).replace('$Y$', j)\r\n                content += thisline\r\n                flag = true\r\n            }\r\n        }\r\n    }\r\n    template = template.replace('$CONTENT$', content)\r\n    // The east axis\r\n    let east_axis = ''\r\n    for (let i = 0; i < GRID_HEIGHT; i++) {\r\n        if (GRID_DATA[i + 1][0] == '' || GRID_DATA[i + 1][GRID_WIDTH + 1] == '') {\r\n            console.log(\"Missing east axis value pair, at column\" + (i + 1))\r\n            console.log(GRID_DATA[i + 1][0])\r\n            console.log(GRID_DATA[i + 1][GRID_WIDTH + 1])\r\n            return undefined\r\n        }\r\n        let this_line = clue.replace('$INDEX$', GRID_DATA[i + 1][0]).replace('$VALUE$', GRID_DATA[i + 1][GRID_WIDTH + 1])\r\n        east_axis += this_line\r\n    }\r\n    template = template.replace('$AXISEAST$', east_axis)\r\n    let south_axis = ''\r\n    for (let j = 0; j < GRID_WIDTH; j++) {\r\n        if (GRID_DATA[0][j + 1] == '' || GRID_DATA[GRID_HEIGHT + 1][j + 1] == '') {\r\n            console.log(\"Missing south axis value pair, at row\" + (j + 1))\r\n            console.log(GRID_DATA[0][j + 1])\r\n            console.log(GRID_DATA[GRID_HEIGHT + 1][j + 1])\r\n            return undefined\r\n        }\r\n        let this_line = clue.replace('$INDEX$', GRID_DATA[0][j + 1]).replace('$VALUE$', GRID_DATA[GRID_HEIGHT + 1][j + 1])\r\n        south_axis += this_line\r\n    }\r\n    template = template.replace('$AXISSOUTH$', south_axis)\r\n    return template\r\n}",
        "useStandard": false,
        "XMLName": "GeneralWithBorderLabel"
    },
    "Nurikabe": {
        "useStandard": "General",
        "XMLName": "Nurikabe"
    },
    "Sudoku": {
        "useStandard": false,
        "template": "<?xml version='1.0' encoding='UTF-8' standalone='no'?>\n<Legup version='2.0.0'>\n    <puzzle name='Sudoku'>\n        <board size='$SIZE$'>\n            <cells>\n                $CONTENT$\n            </cells>\n        </board>\n    </puzzle>\n</Legup>",
        "cell": "<cell value='$VALUE$' x='$X$' y='$Y$'/>",
        "function": "function Sudoku_output(e){   \r\n\r\n    if(GRID_WIDTH!=GRID_HEIGHT){\r\n        console.log(\"Not a Sudoku board!\")\r\n        return\r\n    }\r\n    var template = ''+ JSON_SRC['Sudoku']['template']\r\n    template = template.replace('$SIZE$',GRID_HEIGHT)\r\n    var content = ''\r\n    var cell = ''+ JSON_SRC['Sudoku']['cell']\r\n    var flag = false\r\n    for (let i = 0; i < GRID_HEIGHT; i++) {\r\n        for (let j = 0; j < GRID_WIDTH; j++) {\r\n            if(GRID_DATA[i+1][j+1] != '' && Number.isInteger(parseInt(GRID_DATA[i+1][j+1]))){\r\n                var thisline = cell.replace('$VALUE$',GRID_DATA[i+1][j+1]).replace('$X$',j).replace('$Y$',i)\r\n                content += thisline\r\n                flag = true\r\n            }\r\n        }\r\n    }\r\n    template = template.replace('$CONTENT$',content)\r\n    if(flag){\r\n        console.log(template)\r\n        return template\r\n    }\r\n    else{\r\n        console.log(\"Nothing to output! Empty board.\")\r\n    }\r\n   \r\n}"
    },
    "Fillapix": {
        "useStandard": "General",
        "XMLName": "Fillapix"
    },
    "LightUp": {
        "useStandard": "General",
        "XMLName": "LightUp"
    },
    "Masyu": {
        "useStandard": "General",
        "XMLName": "Masyu"
    },
    "TreeTent":{
        "useStandard": "GeneralWithBorderLabel",
        "XMLName": "TreeTent" 
    },
    "BattleShip":{
        "useStandard": "GeneralWithBorderLabel",
        "XMLName": "BattleShip" 
    }

    
    
}